trigger:
  batch: true
  branches:
    include:
    - objwriter/*

pr: none

variables:
- template: /eng/common-variables.yml@self

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      sourceAnalysisPool:
        name: NetCore1ESPool-Svc-Internal
        image: 1es-windows-2022
        os: windows
    containers:
      centos7:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-20210714125435-9b5bbc2
      ubuntu1604crossarm64:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-cross-arm64-cfdd435-20200121150126
      ubuntu1604cross:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-cross-09ec757-20200320131433
      ubuntu1604crossarm64alpine:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-cross-arm64-alpine-20210923140502-78f7860
      alpinewithnode:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.13-WithNode-20210910135845-c401c85
    stages:
    - stage: build
      displayName: Build
      jobs:
      - template: /eng/common/templates-official/jobs/jobs.yml@self
        parameters:
          enablePublishBuildArtifacts: true
          enablePublishBuildAssets: true
          enablePublishUsingPipelines: true
          variables:
            - _BuildConfig: Release
          jobs:

          ############ LINUX x64 BUILD ############
          - job: Build_Linux_x64
            displayName: Linux x64
            timeoutInMinutes: 180
            pool:
              name: NetCore1ESPool-Svc-Internal
              image: 1es-ubuntu-2204
              os: linux
            container: centos7
            steps:
            - bash: |
                set -ex
                git clean -ffdx
                git reset --hard HEAD
              displayName: 'Clean up working directory'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch x64 --configuration $(_BuildConfig) $(_InternalBuildArgs)
              displayName: 'Build and package'

            - bash: |
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux /p:PlatformName=x64 --projects $(Build.SourcesDirectory)/llvm.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ LINUX arm64 BUILD ############
          - job: Build_Linux_arm64
            displayName: Linux arm64
            timeoutInMinutes: 180
            pool:
              name: NetCore1ESPool-Svc-Internal
              image: 1es-ubuntu-2204
              os: linux
            container: ubuntu1604crossarm64
            steps:
            - bash: |
                set -ex
                git clean -ffdx
                git reset --hard HEAD
              displayName: 'Clean up working directory'

            - bash: |
                ./build.sh --ci --restore --build --arch x64 -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:BuildLLVMTableGenOnly=true
              displayName: 'Build host llvm-tblgen for cross-compiling'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch arm64 --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:LLVMTableGenPath=$(Build.SourcesDirectory)/artifacts/obj/BuildRoot-x64/bin/llvm-tblgen
              displayName: 'Build and package'
              env:
                ROOTFS_DIR: /crossrootfs/arm64
                CLANG_TARGET: aarch64-linux-gnu

            - bash: |
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux /p:PlatformName=arm64 --projects $(Build.SourcesDirectory)/llvm.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ LINUX arm BUILD ############
          - job: Build_Linux_arm
            displayName: Linux arm
            timeoutInMinutes: 180
            pool:
              name: NetCore1ESPool-Svc-Internal
              image: 1es-ubuntu-2204
              os: linux
            container: ubuntu1604cross
            steps:
            - bash: |
                set -ex
                git clean -ffdx
                git reset --hard HEAD
              displayName: 'Clean up working directory'

            - bash: |
                ./build.sh --ci --restore --build --arch x64 -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:BuildLLVMTableGenOnly=true
              displayName: 'Build host llvm-tblgen for cross-compiling'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch arm --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:LLVMTableGenPath=$(Build.SourcesDirectory)/artifacts/obj/BuildRoot-x64/bin/llvm-tblgen
              displayName: 'Build and package'
              env:
                ROOTFS_DIR: /crossrootfs/arm
                CLANG_TARGET: arm-linux-gnueabihf

            - bash: |
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux /p:PlatformName=arm --projects $(Build.SourcesDirectory)/llvm.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ LINUX MUSL x64 BUILD ############
          - job: Build_Linux_musl_x64
            displayName: Linux_musl x64
            timeoutInMinutes: 180
            pool:
              name: NetCore1ESPool-Svc-Internal
              image: 1es-ubuntu-2204
              os: linux
            container: alpinewithnode
            steps:
            - bash: |
                set -ex
                git clean -ffdx
                git reset --hard HEAD
              displayName: 'Clean up working directory'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch x64 --configuration $(_BuildConfig) $(_InternalBuildArgs)
              displayName: 'Build and package'

            - bash: |
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux-musl /p:PlatformName=x64 --projects $(Build.SourcesDirectory)/llvm.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ LINUX MUSL arm64 BUILD ############
          - job: Build_Linux_musl_arm64
            displayName: Linux_musl arm64
            timeoutInMinutes: 180
            pool:
              name: NetCore1ESPool-Svc-Internal
              image: 1es-ubuntu-2204
              os: linux
            container: ubuntu1604crossarm64alpine
            steps:
            - bash: |
                set -ex
                git clean -ffdx
                git reset --hard HEAD
              displayName: 'Clean up working directory'

            - bash: |
                ./build.sh --ci --restore --build --arch x64 -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:BuildLLVMTableGenOnly=true
              displayName: 'Build host llvm-tblgen for cross-compiling'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch arm64 --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:LLVMTableGenPath=$(Build.SourcesDirectory)/artifacts/obj/BuildRoot-x64/bin/llvm-tblgen
              displayName: 'Build and package'
              env:
                ROOTFS_DIR: /crossrootfs/arm64
                CLANG_TARGET: aarch64-alpine-linux-musl

            - bash: |
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=linux-musl /p:PlatformName=arm64 --projects $(Build.SourcesDirectory)/llvm.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ MACOS x64 BUILD ############
          - job: Build_macOS_x64
            displayName: macOS x64
            timeoutInMinutes: 180
            pool:
              name: Azure Pipelines
              vmImage: macos-11
              os: macOS
            steps:
            - bash: |
                set -ex
                git clean -ffdx
                git reset --hard HEAD
              displayName: 'Clean up working directory'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch x64 --configuration $(_BuildConfig) $(_InternalBuildArgs)
              displayName: 'Build and package'

            - bash: 
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=osx /p:PlatformName=x64 --projects $(Build.SourcesDirectory)/llvm.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ MACOS arm64 BUILD ############
          - job: Build_macOS_arm64
            displayName: macOS arm64
            timeoutInMinutes: 180
            pool:
              name: Azure Pipelines
              vmImage: macos-11
              os: macOS
            steps:
            - bash: |
                set -ex
                git clean -ffdx
                git reset --hard HEAD
              displayName: 'Clean up working directory'

            - bash: |
                ./build.sh --ci --restore --build --arch x64 -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:BuildLLVMTableGenOnly=true
              displayName: 'Build host llvm-tblgen for cross-compiling'

            - bash: |
                ./build.sh --ci --restore --build --pack --arch arm64 --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:LLVMTableGenPath=$(Build.SourcesDirectory)/artifacts/obj/BuildRoot-x64/bin/llvm-tblgen
              displayName: 'Build and package'

            - bash: 
                ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=osx /p:PlatformName=arm64 --projects $(Build.SourcesDirectory)/llvm.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ WINDOWS x64 BUILD ############
          - job: Build_Windows_x64
            displayName: Windows x64
            timeoutInMinutes: 180
            pool:
              name: NetCore1ESPool-Svc-Internal
              image: windows.vs2019.amd64
              os: windows
            steps:
            - script: |
                git clean -ffdx
                git reset --hard HEAD
              displayName: 'Clean up working directory'

            - powershell: eng\build.ps1 -ci -restore -build -pack -arch x64 -configuration $(_BuildConfig) $(_InternalBuildArgs)
              displayName: 'Build and package'

            - powershell: eng\common\build.ps1 -ci -restore -publish -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=win /p:PlatformName=x64 -projects $(Build.SourcesDirectory)\llvm.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

          ############ WINDOWS arm64 BUILD ############
          - job: Build_Windows_arm64
            displayName: Windows arm64
            timeoutInMinutes: 180
            pool:
              name: NetCore1ESPool-Svc-Internal
              image: windows.vs2019.amd64
              os: windows
            steps:
            - script: |
                git clean -ffdx
                git reset --hard HEAD
              displayName: 'Clean up working directory'

            - powershell: eng\build.ps1 -ci -restore -build -arch x64 -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:BuildLLVMTableGenOnly=true
              displayName: 'Build host llvm-tblgen for cross-compiling'

            - powershell: eng\build.ps1 -ci -restore -build -pack -arch arm64 -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:LLVMTableGenPath=$(Build.SourcesDirectory)\artifacts\obj\BuildRoot-x64\bin\llvm-tblgen.exe
              displayName: 'Build and package'

            - powershell: eng\common\build.ps1 -ci -restore -publish -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=win /p:PlatformName=arm64 -projects $(Build.SourcesDirectory)\llvm.proj
              displayName: Publish packages
              condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

    ############ POST BUILD ARCADE LOGIC ############
    - template: /eng/common/templates-official/post-build/post-build.yml@self
      parameters:
        enableSourceLinkValidation: false
        enableSigningValidation: false
        enableSymbolValidation: false
        enableNugetValidation: true
